<?php declare(strict_types=1);
/**
 * src/Controller/Controller.php
 *
 * Copyright © 2024, Philippe Croué, all rights reserved under MIT license.
 */

namespace PhpRestMVC\Controller;

use PhpRestMVC\Env;
use PhpRestMVC\Router;
use PhpRestMVC\View\View;

/**
 * Class Controller
 * Base controller, manage connection security and page generation
 */
class Controller {

  /**
   * Property Env $_env
   * Instance of application environment
   */
  protected static $_env = null;

  /**
   * Property Router $_router
   * Instance of Router
   */
  protected static $_router = null;

  /**
   * Method __construct()
   * Controller initialization
   */
  public function __construct() {

    self::$_env = Env::getInstance();
    self::$_router = Router::getInstance();
  }

  // Actions

  /**
   * Method get
   * Used for GET requested method
   * Call index if argument i is sent (identifier)
   * Otherwise call list to get all rows
   *
   * @return String, the list or index result
   */
  public function get() {

    return Router::getInstance()::getId() == 0
           ? $this->list()
           : $this->index();
  }

  /**
   * Method list
   * Get all object rows
   *
   * @return String, the object list result
   */
  public function list() {

    return $this->show();
  }

  /**
   * Method index
   * Get an object row, depending of sent i argument
   *
   * @return String, the object row definition
   */
  public function index() {

    return $this->show();
  }

  /**
   * Method post
   * Used for POST requested method
   *
   * @return Integer, the SQL INSERT result. The new object id if created, otherwise 0
   */
  public function post() {

    return $this->show();
  }

  /**
   * Method put
   * Used for PUT requested method
   *
   * @return Boolean, the SQL UPDATE result. True if updated, otherwise false
   */
  public function put() {

    return $this->show();
  }

  /**
   * Method delete
   * Used for DELETE requested method
   *
   * @return Boolean, the SQL DELETE result. True if deleted, otherwise false
   */
  public function delete() {

    return $this->show();
  }

  /**
   * Method show
   * Show request result
   *
   * @return String, the request result generated by View
   */
  public function show($data = []) {

    return View::show($data);
  }

  /**
   * Method getFields
   * Get sent arguments list from $_POST and depending of valid list
   *
   * @param Array $validFields, the list of valid fields
   *
   * @return Array, the filtered list of valid fields
   */
  protected function getFields($validFields) {

    $fields = [];

    foreach($validFields as $name) {

      if(isset($_POST[$name])) {

        $fields[$name] = $_POST[$name];
      }
    }

    return $fields;
  }
}
